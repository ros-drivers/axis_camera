#!/usr/bin/env python3
"""Axis video & PTZ node
"""

import rospy

from axis_camera.axis_video import Axis
from axis_camera.axis_ptz import AxisPTZ

def updateArgs(arg_defaults):
    '''Look up parameters starting in the driver's private parameter space, but
    also searching outer namespaces.  Defining them in a higher namespace allows
    the axis_ptz.py script to share parameters with the driver.
    '''
    args = {}
    for name, val in arg_defaults.items():
        full_name = rospy.search_param(name)
        if full_name is None:
            args[name] = val
        else:
            args[name] = rospy.get_param(full_name, val)
    # resolve frame_id with tf_prefix (unless already absolute)
    if args['frame_id'][0] != '/':        # not absolute?
        tf_prefix = rospy.search_param('tf_prefix')
        prefix_val = ''
        if tf_prefix is not None:           # prefix defined?
            prefix_val = rospy.get_param(tf_prefix)
            if prefix_val[0] != '/':          # prefix not absolute?
                prefix_val = '/' + prefix_val
        args['frame_id'] = prefix_val + '/' + args['frame_id']
    return(args)


def main():
    rospy.init_node("axis_camera_node")

    arg_defaults = {
        'hostname': '192.168.0.90',       # default IP address
        'username': 'root',               # default login name
        'password': '',
        'width': 640,
        'height': 480,
        'fps': 0,                         # frames per second (0 = camera default)
        'frame_id': 'axis_camera',
        'camera_info_url': '',
        'use_encrypted_password' : True,
        'camera' : 0,
        'ir': False,
        'defog': False,
        'wiper': False,
        'ptz': False,
        'speed_control': False }

    args = updateArgs(arg_defaults)

    axis = Axis(**args)

    if args['ptz']:
        ptz = AxisPTZ(**args)
        srv = Server(PTZConfig, my_ptz.callback)

    rospy.spin()

if __name__=='__main__':
    main()
